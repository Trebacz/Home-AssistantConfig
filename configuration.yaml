
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

# Uncomment this if you are using SSL/TLS, running in Docker container, etc.
# http:
#   base_url: example.duckdns.org:8123

group: !include groups.yaml
automation: !include automations.yaml
mqtt: !include mqtt.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
#sensor: !include purpleair.yaml

# Text to speech
tts:
  - platform: google_translate

homeassistant:
  auth_mfa_modules:
    - type: totp

# Enable mqtt logging
logger:
  default: warning
  logs:
#    homeassistant.components.mqtt: debug
    homeassistant.components.mqtt: warning
#    custom_components.mail_and_packages: debug

device_tracker:
  - platform: bluetooth_le_tracker
    new_device_defaults:
      track_new_devices: true
#  - platform: bluetooth_tracker

#Enable stream
stream:

alert:
  garage_door:
    name: Garage is open
    message: Garage is open
    done_message: Garage is closed
    entity_id: cover.garage_door
    state: 'open'
    repeat:
      - 15
      - 30
      - 60
    can_acknowledge: false
    skip_first: true
    notifiers:
      - mobile_app_sm_g955u1
      - mobile_app_wendy_s_phone
      - garage_open_notification

google_assistant:
  project_id: home-assistant-d67c1
  service_account: !include SERVICE-ACCOUNT.json
  report_state: true
  secure_devices_pin: !secret google_device_pin

recorder:
  db_url: !secret recorder_db_url
  commit_interval: 30 #defaults to 5
  purge_keep_days: 10 #defaults to 10
  exclude:
    domains:
#      - automation
      - updater
    entity_globs:
      - sensor.*_uptime*
      - sensor.uptime_*
      - sensor.vacuum_* #Added to reduce roborock errors
      - automation.vacuum_* #Added to reduce roborock errors
    entities:
#      - sun.sun # Don't record sun data
#      - sensor.last_boot # Comes from 'systemmonitor' sensor platform
      - sensor.date
    event_types:
#      - call_service # Don't record service calls

influxdb:
  host: !secret influxdb_host
  port: 8086
  database: home_assistant
  username: home-assistant
  password: !secret influxdb_password
  max_retries: 3
  default_measurement: state

twilio:
  account_sid: !secret twillio_sid
  auth_token: !secret twillio_token

notify:
  - name: HA_Twillio
    platform: twilio_sms
    from_number: !secret twillio_from_number
  - platform: group
    name: garage_open_notification
    services:
      - service: notify
        data:
          title: "\U0001F699 Garage left open!"
          message: Garage door has been open for 15 minutes. Close it?
#      - service: ha_twillio
#        data:
#          message: Garage door has been open for 15 minutes. Close it?
#          target:
#          - '+18155292638'
#          - '+18155297819'

spotcast:
  sp_dc: !secret sp_dc
  sp_key: !secret sp_key

#media_player:
#  - platform: samsungtv_tizen
#    host: 192.168.0.127
#    mac: 98:06:3c:33:0e:9a

binary_sensor:
  - platform: ping
    host: 192.168.0.1
    count: 5
    scan_interval: 60
    name: Smoothwall Ping
  - platform: ping
    host: www.trebacz.com
    count: 5
    scan_interval: 60
    name: Trebacz Ping
  - platform: ping
    host: google.com
    count: 5
    scan_interval: 60
    name: Google Intenet Ping
  - platform: ping
    host: cam4.trebacz.com
    count: 5
    scan_interval: 60
    name: Patio Camera Ping
  - platform: template
    sensors:
      warm_inside:
        friendly_name: "Inside temperature higher than outside"
        value_template: >
          {{ states('sensor.average_house_temp') | float(0) >= states('sensor.outside_temperature') | float(0)}}
  - platform: template
    sensors:
      cool_inside:
        friendly_name: "Inside temperature cooler than outside"
        value_template: >
          {{ states('sensor.average_house_temp') | float(0) < states('sensor.outside_temperature') | float(0)}}
#  - platform: template
#    sensors:
#      motion_frontdoor:
#        friendly_name: Camera frontdoor
#        device_class: motion
#        value_template: "{{ is_state('camera.frontdoor', 'motion') }}"
#        delay_off:
#          seconds: 30
  - platform: template
    sensors:
      all_windows:
        friendly_name: "All Windows"
        value_template: >-
          {{ is_state('binary_sensor.master_bedroom_sliding_door_and_window', 'on') or
             is_state('binary_sensor.south_bedroom_window', 'on') or
             is_state('binary_sensor.office_window', 'on') or
             is_state('binary_sensor.dining_room_window', 'on') or
             is_state('binary_sensor.living_room_slider', 'on') }}
        device_class: window
  - platform: template
    sensors:
      all_doors:
        friendly_name: "All Doors"
        value_template: >-
          {{ is_state('binary_sensor.entry_and_exit_doors', 'on') or
             is_state('binary_sensor.kitchen_door_contact', 'on') or
             is_state('binary_sensor.double_garage_door_contact', 'on') or
             is_state('binary_sensor.single_garage_door_contact', 'on') or
             is_state('binary_sensor.living_room_slider', 'on') or
             is_state('binary_sensor.master_bedroom_door_and_window', 'on') or
             is_state('binary_sensor.master_bedroom_sliding_door_and_window', 'on') or
             is_state('binary_sensor.pool_bathroom_contact', 'on') }}
        device_class: door
  - platform: template #Pool Thermometer Offline not used by automation now
    sensors:
      pool_themometer_offline:
        friendly_name: "Pool Thermometer Offline for a while"
        value_template: >
          {{(as_timestamp(now()) - as_timestamp(states('sensor.pool_thermometer_uptime'))) // 60|int(0) > 31 }}
        device_class: problem

command_line:
  - sensor:
      name: ha_instances
      command: pgrep -f 'python3 -m homeassistant --config /config' | wc -l
      scan_interval: 60

sensor:
#  - platform: untappd
#    username: Trebacz
#    id: !secret untapped_id
#    secret: !secret untapped_secret

  - platform: min_max
    name: average_house_temp
    type: mean
    round_digits: 1
    entity_ids:
      - sensor.master_bedroom_temperature
      - sensor.southbedrooms_temperature
      - sensor.guest_bedroom_environment_temperature
      - sensor.office_environment_temperature
      - sensor.water_leak_sensor_temperature_measurement

# zwift Start of Sensors 2022-03-04
  - platform: zwift
    username: !secret my_zwift_username
    password: !secret my_zwift_password
#    players:
#      - !secret my_friends_zwift_player_id

  - platform: template
    sensors:
      # Gets temperature from Honeywell climate
      master_bedroom_temperature:
        friendly_name: Master Bedroom Temperature
        unit_of_measurement: 'Â°F'
        value_template: >
          {{ float(state_attr('climate.bedroom', 'current_temperature')) }}
      # Gets temperature from Honeywell climate
      southbedrooms_temperature:
        friendly_name: South Bedrooms Temperature
        unit_of_measurement: 'Â°F'
        value_template: >
          {{ float(state_attr('climate.south_bedrooms', 'current_temperature')) }}

# Mail Summary Sensors
  - platform: template
    sensors:
      mail_deliveries_message:
        friendly_name: "Deliveries Summary"
        value_template: >
          {# Deliveries Sentence #}
            {% macro deliveries_sentence() -%}
                  {%- if states("sensor.mail_usps_mail")|int == 0 -%}
                    No
                  {%- else -%}
                    {{states("sensor.mail_usps_mail")|int}}
                  {%- endif -%}
                {{' '}}
                  {%- if states("sensor.mail_usps_mail")|int <= 1 -%}
                    pieces of mail
                  {%- else -%}
                    pieces of mail
                  {%- endif -%}
                {{' '}}will be delivered.{{' '}}
                  {%- if states("sensor.mail_usps_delivering")|int == 0 -%}
                    No
                  {%- else -%}
                    {{states("sensor.mail_usps_delivering")|int}}
                  {%- endif -%}
                {{' '}}
                  {%- if states("sensor.mail_usps_delivering")|int == 1 -%}
                    USPS package is
                  {%- else -%}
                    USPS packages are
                  {%- endif -%}
                {{' '}}in transit.{{' '}}
                  {%- if states("sensor.mail_fedex_delivering")|int == 0 -%}
                    No
                  {%- else -%}
                    {{states("sensor.mail_fedex_delivering")|int}}
                  {%- endif -%}
                {{' '}}
                  {%- if states("sensor.mail_fedex_delivering")|int == 1 -%}
                    FedEx package is
                  {%- else -%}
                    Fedex packages are
                  {%- endif -%}
                {{' '}}in transit.{{' '}}
                {%- if states("sensor.mail_ups_delivering")|int == 0 -%}
                    No
                  {%- else -%}
                    {{states("sensor.mail_ups_delivering")|int}}
                  {%- endif -%}
                {{' '}}
                  {%- if states("sensor.mail_ups_delivering")|int == 1 -%}
                    UPS package is
                  {%- else -%}
                    UPS packages are
                  {%- endif -%}
                {{' '}}in transit.{{' '}}
                {%- if states("sensor.mail_amazon_packages")|int == 0 -%}
                    No
                  {%- else -%}
                    {{states("sensor.mail_amazon_packages")|int}}
                  {%- endif -%}
                {{' '}}
                  {%- if states("sensor.mail_amazon_packages")|int == 1 -%}
                    Amazon package is
                  {%- else -%}
                    Amazon packages are
                  {%- endif -%}
                {{' '}}in transit.{{' '}}
            {%- endmacro %}
          {{deliveries_sentence()}}
# Mail Summary End of Sesnsors

# Purpleair Start of Desription Sensor
      purpleair_description:
        unique_id: 'purpleair_SENSORID_description'
        friendly_name: 'PurpleAir AQI Description'
        value_template: >
          {% if (states('sensor.e_sycamore_drive_air_quality_index_raw')|float(0)) >= 401.0 %}
            Hazardous
          {% elif (states('sensor.e_sycamore_drive_air_quality_index_raw')|float(0)) >= 301.0 %}
            Hazardous
          {% elif (states('sensor.e_sycamore_drive_air_quality_index_raw')|float(0)) >= 201.0 %}
            Very Unhealthy
          {% elif (states('sensor.e_sycamore_drive_air_quality_index_raw')|float(0)) >= 151.0 %}
            Unhealthy
          {% elif (states('sensor.e_sycamore_drive_air_quality_index_raw')|float(0)) >= 101.0 %}
            Unhealthy for Sensitive Groups
          {% elif (states('sensor.e_sycamore_drive_air_quality_index_raw')|float(0)) >= 51.0 %}
            Moderate
          {% elif (states('sensor.e_sycamore_drive_air_quality_index_raw')|float(0)) >= 0.0 %}
            Good
          {% else %}
            undefined
          {% endif %}
# Purpleair End of DesciptionSensor


# SRP Tariff
  - platform: template
    sensors:
      energy_tariff:
        friendly_name: 'SRP Energy Tariff Daytime Saver Pilot'
        unit_of_measurement: 'USD/kWh'
        value_template: >
          {% set time = { "month": (now().strftime('%m') | int), "hour": (now().strftime('%H') | int), "weekday": (now().weekday() | int ) } %}
          {%if ((time.month <= 4) or (time.month > 10)) %} {# November through April - Winter #}
              {% set tariff = { "WeekdayPeak": 0.0987, "OffPeak": 0.0987, "SuperOffPeak": 0.0433 } %}
              {%if ((time.hour >= 18) and (time.hour < 21)) and (time.weekday < 5) %}
                {{ tariff.WeekdayPeak }}
              {%elif ((time.hour >= 9) and (time.hour < 15)) and (time.weekday < 5) %}
                {{ tariff.SuperOffPeak }}
              {%else%}
                {{ tariff.OffPeak }}
              {%endif%}
          {%elif ((time.month == 7) or (time.month == 8)) %} {# July and August - Summer Peak #}
              {% set tariff = { "WeekdayPeak": 0.3637, "OffPeak": 0.1180, "SuperOffPeak": 0.0433 } %}
              {%if ((time.hour >= 18) and (time.hour < 21)) and (time.weekday < 5) %}
                {{ tariff.WeekdayPeak }}
              {%elif ((time.hour >= 9) and (time.hour < 15)) and (time.weekday < 5) %}
                {{ tariff.SuperOffPeak }}
              {%else%}
                {{ tariff.OffPeak }}
              {%endif%}
          {%else%} {# May June September October - Summer #}
              {% set tariff = { "WeekdayPeak": 0.3572, "OffPeak": 0.1096, "SuperOffPeak": 0.0433 } %}
              {%if ((time.hour >= 18) and (time.hour < 21)) and (time.weekday < 5) %}
                {{ tariff.WeekdayPeak }}
              {%elif ((time.hour >= 9) and (time.hour < 15)) and (time.weekday < 5) %}
                {{ tariff.SuperOffPeak }}
              {%else%}
                {{ tariff.OffPeak }}
              {%endif%}
          {%endif%}

  - platform: template
    sensors:
      energy_tariff_plan:
        friendly_name: 'SRP Energy Tariff Plan Daytime Saver Pilot'
        value_template: >
          {% set time = { "month": (now().strftime('%m') | int), "hour": (now().strftime('%H') | int), "weekday": (now().weekday() | int ) } %}
          {%if ((time.hour >= 18) and (time.hour < 21)) and (time.weekday < 5) %}
            Weekday Peak
          {%elif ((time.hour >= 9) and (time.hour < 15)) and (time.weekday < 5) %}
            Super Off Peak
          {%else%}
            Off Peak
          {%endif%}

  - platform: template
    sensors:
      energy_tariff_season:
        friendly_name: 'SRP Energy Tariff Season Daytime Saver Pilot'
        value_template: >
          {% set time = { "month": (now().strftime('%m') | int ) } %}
          {%if ((time.month <= 4) or (time.month > 10)) %} {# November through April - Winter #}
              SRP Winter
          {%elif ((time.month == 7) or (time.month == 8)) %} {# July and August - Summer Peak #}
              SRP Summer Peak
          {%else%}
              SRP Summer {# May June September October - Summer #}
          {%endif%}
          
  - platform: template
    sensors:
      energy_tariff_ez_3:
        friendly_name: 'SRP Energy Tariff EZ-3'
        unit_of_measurement: 'USD/kWh'
        value_template: >
          {% set time = { "month": (now().strftime('%m') | int), "hour": (now().strftime('%H') | int), "weekday": (now().weekday() | int ) } %}
          {%if ((time.month <= 4) or (time.month > 10)) %} {# November through April - Winter #}
              {% set tariff = { "WeekdayPeak": 0.1157, "OffPeak": 0.8.32 } %}
              {%if ((time.hour >= 15) and (time.hour < 18)) and (time.weekday < 5) %}
                {{ tariff.WeekdayPeak }}
              {%else%}
                {{ tariff.OffPeak }}
              {%endif%}
          {%elif ((time.month == 7) or (time.month == 8)) %} {# July and August - Summer Peak #}
              {% set tariff = { "WeekdayPeak": 0.3520, "OffPeak": 0.0929 } %}
              {%if ((time.hour >= 15) and (time.hour < 18)) and (time.weekday < 5) %}
                {{ tariff.WeekdayPeak }}
              {%else%}
                {{ tariff.OffPeak }}
              {%endif%}
          {%else%} {# May June September October - Summer #}
              {% set tariff = { "WeekdayPeak": 0.2971, "OffPeak": 0.0905 } %}
              {%if ((time.hour >= 15) and (time.hour < 18)) and (time.weekday < 5) %}
                {{ tariff.WeekdayPeak }}
              {%else%}
                {{ tariff.OffPeak }}
              {%endif%}
          {%endif%}
          
  - platform: template
    sensors:
      energy_tariff_plan_ez_3:
        friendly_name: 'SRP Energy Tariff Plan EZ-3'
        value_template: >
          {% set time = { "month": (now().strftime('%m') | int), "hour": (now().strftime('%H') | int), "weekday": (now().weekday() | int ) } %}
          {%if ((time.hour >= 15) and (time.hour < 18)) and (time.weekday < 5) %}
              Weekday Peak
          {%else%}
              Off Peak
          {%endif%}
# SRP Tariff end

# Water Softner Level Sensors
  - platform: template
    sensors:
      water_softener_percentage:
         friendly_name: "Water Softener Percentage"
         unit_of_measurement: '%'
#         value_template: "{{ ((states('sensor.water_softener')|float(0) * -4.00) + 100.00)| round (2)}}"
         value_template: "{{ ((states('sensor.water_softener_salt_level_2023_water_softener')|float(0) * -4.00) + 100.00)| round (2)}}"

  - platform: template
    sensors:
      water_softener_need_filled:
        friendly_name: "Water Softener - Needs filled?"
        value_template: >-
          {% if states('sensor.water_softener_percentage')| float(0) < 10 %}
            on
          {% else %}
            off
          {% endif %}
# Water Softner Level End of Sensors



#==================
#=== System Sensors
#==================
  - platform: systemmonitor
    resources:
      - type: last_boot
      - type: disk_use_percent
        arg: /
      - type: memory_use_percent
      - type: processor_use
      - type: processor_temperature
      - type: memory_free

shell_command:
  kill_rogue_ha: pgrep -f 'python3 -m homeassistant --config /config' |awk 'NR >= 2' | xargs -n1 kill -9

timer:
  garage_door:
    duration: '00:15:00'

panel_iframe:
  # Zigbee2mqtt menu
  zigbee2mqtt:
    title: "Zigbee2mqtt"
    url: "https://zigbee2mqtt.trebacz.com/"
    icon: mdi:lan
    require_admin: true

http:
  use_x_forwarded_for: true
  trusted_proxies:
    - !secret trusted_proxy_NGINX
  ip_ban_enabled: true
  login_attempts_threshold: 10
