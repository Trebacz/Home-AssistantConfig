
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

# Uncomment this if you are using SSL/TLS, running in Docker container, etc.
# http:
#   base_url: example.duckdns.org:8123

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
#sensor: !include purpleair.yaml

# Text to speech
tts:
  - platform: google_translate
  
homeassistant:
  auth_mfa_modules:
    - type: totp
  unit_system: imperial

mqtt:
#  broker: 192.168.0.216
#  port: 1883
#  discovery: true
  discovery_prefix: homeassistant
#  discovery_prefix: zigbee2mqtt/bridge
#  username: !secret mqtt_username
#  password: !secret mqtt_password
  
# Enable mqtt logging
logger:
  default: warning
  logs:
#    homeassistant.components.mqtt: debug
    homeassistant.components.mqtt: warning
  
# Enable Cameras DT -3/2020
#camera:
#   - platform: generic
#     name: frontstreet
#     still_image_url: !secret CameraFrontStreet_URL
#     stream_source: !secret CameraFrontStreet_Source

#   - platform: generic
#     name: fourpeaks
#     still_image_url: !secret CameraFourPeaks_URL
#     stream_source: !secret CameraFourPeaks_Source

#Enable stream
stream:

google_assistant:
  project_id: home-assistant-d67c1
  service_account: !include SERVICE-ACCOUNT.json
  report_state: true
  secure_devices_pin: "9164"

recorder:
  db_url: !secret recorder_db_url
  commit_interval: 30
  exclude:
    domains:
#      - automation
      - updater
    entity_globs:
      - sensor.*_uptime* 
      - sensor.uptime_*
    entities:
#      - sun.sun # Don't record sun data
#      - sensor.last_boot # Comes from 'systemmonitor' sensor platform
      - sensor.date
    event_types:
#      - call_service # Don't record service calls
  
influxdb:
  host: !secret influxdb_host
  port: 8086
  database: home_assistant
  username: home-assistant
  password: !secret influxdb_password
  max_retries: 3
  default_measurement: state
  
twilio:
  account_sid: !secret twillio_sid
  auth_token: !secret twillio_token
  
notify:
  - name: HA_Twillio
    platform: twilio_sms
    from_number: +14805737302
    
spotify:
  client_id: !secret spotify_id
  client_secret: !secret spotify_secret

spotcast:
  sp_dc: !secret sp_dc
  sp_key: !secret sp_key

media_player:
  - platform: samsungtv_tizen
    host: 192.168.0.127
    mac: 98:06:3c:33:0e:9a

binary_sensor:
  - platform: ping
    host: 192.168.0.1
    count: 5
    scan_interval: 60
    name: Smoothwall Ping
  - platform: ping
    host: trebacz.com
    count: 5
    scan_interval: 60
    name: Trebacz Ping
  - platform: ping
    host: google.com
    count: 5
    scan_interval: 60
    name: Google Intenet Ping
  - platform: ping
    host: cam4.trebacz.com
    count: 5
    scan_interval: 60
    name: Patio Camera Ping
  - platform: template
    sensors:
      warm_inside:
        friendly_name: "Inside temperature higher than outside"
        value_template: >
          {{ states('sensor.average_house_temp') | float(0) >= states('sensor.outside_temperature') | float(0)}}
  - platform: template
    sensors:
      cool_inside:
        friendly_name: "Inside temperature cooler than outside"
        value_template: >
          {{ states('sensor.average_house_temp') | float(0) < states('sensor.outside_temperature') | float(0)}}
            platform: template
  - platform: template
    sensors:
      motion_frontdoor:
        friendly_name: Camera frontdoor
        device_class: motion
        value_template: "{{ is_state('camera.frontdoor', 'motion') }}"
        delay_off: 
          seconds: 30
  - platform: mqtt
    state_topic: "weather/txBatteryStatus"
    name: "Replace Weather Station Battery"
    value_template: "{{ value | round(1) }}"
    icon: "mdi:battery"
    payload_on: "1.0"
    payload_off: "0.0"
  - platform: template
    sensors:
      all_windows:
        friendly_name: "All Windows"
        value_template: >-
          {{ is_state('binary_sensor.master_bedroom_sliding_door_and_window', 'on') or
             is_state('binary_sensor.south_bedroom_window', 'on') or
             is_state('binary_sensor.office_window', 'on') or
             is_state('binary_sensor.dining_room_window', 'on') or
             is_state('binary_sensor.living_room_slider', 'on') }}
        device_class: window
  - platform: template
    sensors:
      all_doors:
        friendly_name: "All Doors"
        value_template: >-
          {{ is_state('binary_sensor.entry_and_exit_doors', 'on') or
             is_state('binary_sensor.kitchen_door_contact', 'on') or
             is_state('binary_sensor.double_garage_door_contact', 'on') or
             is_state('binary_sensor.single_garage_door_contact', 'on') or
             is_state('binary_sensor.living_room_slider', 'on') or
             is_state('binary_sensor.master_bedroom_door_and_window', 'on') or
             is_state('binary_sensor.master_bedroom_sliding_door_and_window', 'on') or
             is_state('binary_sensor.pool_bathroom_contact', 'on') }}
        device_class: door


    # Example configuration.yaml entry
sensor:
  - platform: untappd
    username: Trebacz
    id: !secret untapped_id
    secret: !secret untapped_secret
    
  - platform: min_max
    name: average_house_temp
    type: mean
    entity_ids:
      - sensor.master_bedroom_temperature
      - sensor.southbedrooms_temperature
      - sensor.water_leak_sensor_temperature_measurement
# WeeWX MQTT Sensors
  - platform: mqtt
    state_topic: "weather/windSpeed_mph"
    name: "Wind Speed"
    unit_of_measurement: 'mph'
    value_template: "{{ value | round(1) }}"
    icon: "mdi:weather-windy-variant"
  - platform: mqtt
    state_topic: "weather/windGust_mph"
    name: "Wind Gust"
    unit_of_measurement: 'mph'
    value_template: "{{ value | round(1) }}"
    icon: "mdi:weather-windy"
  - platform: mqtt
    name: 'Outside Temperature  '
    state_topic: 'weather/outTemp_F'
    unit_of_measurement: '°F'
    device_class: 'temperature'
    value_template: "{{ value | round(1) }}"
    icon: mdi:thermometer
  - platform: mqtt
    state_topic: "weather/humidex_F"
    name: "Humidex"
    unit_of_measurement: '°F'
    device_class: 'temperature'
    value_template: "{{ value | round(1) }}"
    icon: "mdi:thermometer"
  - platform: mqtt
    state_topic: "weather/heatindex_F"
    name: "Heat Index"
    unit_of_measurement: '°F'
    device_class: 'temperature'
    value_template: "{{ value | round(1) }}"
    icon: "mdi:thermometer"
  - platform: mqtt
    state_topic: "weather/outHumidity"
    name: "Outdoor Humidity"
    unit_of_measurement: '%'
    value_template: "{{ value | round(1) }}"
    icon: "mdi:water-percent"
  - platform: mqtt
    state_topic: "weather/barometer_inHg"
    name: "Air Pressure"
    unit_of_measurement: "inHg"
    value_template: "{{ value | round(3) }}"
    icon: "mdi:gauge"
  - platform: mqtt
    state_topic: "weather/windDir"
    name: "Wind Direction"
    unit_of_measurement: "degrees"
    value_template: "{{ value | round(1) }}"
    icon: "mdi:compass"
  - platform: mqtt
    state_topic: "weather/windGustDir"
    name: "Wind Gust Direction"
    unit_of_measurement: "degrees"
    value_template: "{{ value | round(1) }}"
    icon: "mdi:compass"
  - platform: mqtt
    state_topic: "weather/rainRate_inch_per_hour"
    name: "Rain Rate"
    unit_of_measurement: "in/hour"
    value_template: "{{ value | round(4) }}"
    icon: "mdi:weather-rainy"
  - platform: mqtt
    state_topic: "weather/rain_in"
    name: "Rain"
    unit_of_measurement: "in"
    value_template: "{{ value | round(4) }}"
    icon: "mdi:weather-rainy"
  - platform: mqtt
    state_topic: "weather/hourRain_in"
    name: "Hour Rain"
    unit_of_measurement: "in"
    value_template: "{{ value | round(4) }}"
    icon: "mdi:weather-rainy"
  - platform: mqtt
    state_topic: "weather/dayRain_in"
    name: "Day Rain"
    unit_of_measurement: "in"
    value_template: "{{ value | round(4) }}"
    icon: "mdi:weather-rainy"
  - platform: mqtt
    state_topic: "weather/rain24_in"
    name: "24 Hour Rain"
    unit_of_measurement: "in"
    value_template: "{{ value | round(4) }}"
    icon: "mdi:weather-rainy"
  - platform: mqtt
    state_topic: "weather/rain_total"
    name: "Rain Total"
    unit_of_measurement: "in"
    value_template: "{{ value | multiply(0.3937) | round(4) }}"
    icon: "mdi:weather-rainy"
  - platform: mqtt
    state_topic: "weather/dateTime"
    name: "WeeWX Timestamp"
    unit_of_measurement: "s"
    value_template: "{{ value }}"
  - platform: mqtt
    state_topic: "weather/inTemp_F"
    name: "Garage Temperature"
    unit_of_measurement: '°F'
    device_class: 'temperature'
    value_template: "{{ value | round(1) }}"
    icon: "mdi:thermometer"
  - platform: mqtt
    state_topic: "weather/inHumidity"
    name: "Garage Humidity"
    unit_of_measurement: '%'
    value_template: "{{ value | round(1) }}"
    icon: "mdi:water-percent"
  - platform: mqtt
    state_topic: "weather/inDewpoint_F"
    name: "Garage Dewpoint"
    unit_of_measurement: '°F'
    device_class: 'temperature'
    value_template: "{{ value | round(1) }}"
    icon: "mdi:thermometer"
  - platform: mqtt
    state_topic: "weather/consBatteryVoltage_volt"
    name: "Weather Station Battery"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    value_template: "{{ value | round(2) }}"
    icon: "mdi:lightning-bolt"
# WeeWX MQTT End of Sensors
  
# Pool Thermometer MQTT Sensors
  - platform: mqtt
    state_topic: "pool-thermometer/pool_temp"
    name: "Pool Temperature"
    unit_of_measurement: '°F'
    device_class: 'temperature'
    # float is to adjust temperature sensor to real pool temperature
    value_template: "{{ value | round(1) }}"
#    value_template: >
#      {
#      {% if states('sensor.pool_temperature') | float > 0 %}
#      { (states('sensor.pool_temperature') | float + 14.9) | round(1) }
#      {% endif %}
#      }
    icon: mdi:thermometer
  - platform: mqtt
    state_topic: "pool-thermometer/rssi"
    name: "Pool Thermometer Signal Strength"
    unit_of_measurement: 'db'
    value_template: "{{ value | round(1) }}"
#    icon: "mdi:weather-windy"
  - platform: mqtt
    state_topic: 'pool-thermometer/ps-voltage'
    name: 'Pool Thermometer Battery'
    unit_of_measurement: 'V'
    device_class: 'voltage'
    value_template: "{{ value | round(2) }}"
    icon: "mdi:lightning-bolt"
  - platform: mqtt
    state_topic: "pool-thermometer/ps-soc"
    name: "Pool Thermometer State of Charge"
    unit_of_measurement: '%'
    device_class: 'battery'
    value_template: "{{ value | round(1) }}"
    icon: "mdi:battery"
# Pool Thermometer MQTT End of Sensors

# zwift Start of Sensors 2022-03-04
  - platform: zwift
    username: !secret my_zwift_username
    password: !secret my_zwift_password
#    players:
#      - !secret my_friends_zwift_player_id

# Purpleair Start of Sensors
  - platform: rest
    name: 'PurpleAir'

    # Substitute in the URL of the sensor you care about.  To find the URL, go
    # to purpleair.com/map, find your sensor, click on it, click on "Get This
    # Widget" then click on "JSON".
    resource: https://www.purpleair.com/json?key=B83XPT6HV1FAKE9W&show=125025

    # Only query once a minute to avoid rate limits:
    scan_interval: 60

    # Set this sensor to be the AQI value.
    #
    # Code translated from JavaScript found at:
    # https://docs.google.com/document/d/15ijz94dXJ-YAZLi9iZ_RaBwrZ4KtYeCy08goGBwnbCU/edit#
    value_template: >
      {{ value_json["results"][0]["Label"] }}
    unit_of_measurement: ""
    # The value of the sensor can't be longer than 255 characters, but the
    # attributes can.  Store away all the data for use by the templates below.
    json_attributes:
      - results
      
  - platform: template
    sensors:
      purpleair_aqi:
        unique_id: 'purpleair_SENSORID_aqi_pm25'
        friendly_name: 'PurpleAir PM2.5 AQI'
        value_template: >
          {% macro calcAQI(Cp, Ih, Il, BPh, BPl) -%}
            {{ (((Ih - Il)/(BPh - BPl)) * (Cp - BPl) + Il)|round|float(0) }}
          {%- endmacro %}
          {% if (states('sensor.purpleair_pm25')|float(0)) > 1000 %}
            invalid
          {% elif (states('sensor.purpleair_pm25')|float(0)) > 350.5 %}
            {{ calcAQI((states('sensor.purpleair_pm25')|float(0)), 500.0, 401.0, 500.0, 350.5) }}
          {% elif (states('sensor.purpleair_pm25')|float(0)) > 250.5 %}
            {{ calcAQI((states('sensor.purpleair_pm25')|float(0)), 400.0, 301.0, 350.4, 250.5) }}
          {% elif (states('sensor.purpleair_pm25')|float(0)) > 150.5 %}
            {{ calcAQI((states('sensor.purpleair_pm25')|float(0)), 300.0, 201.0, 250.4, 150.5) }}
          {% elif (states('sensor.purpleair_pm25')|float(0)) > 55.5 %}
            {{ calcAQI((states('sensor.purpleair_pm25')|float(0)), 200.0, 151.0, 150.4, 55.5) }}
          {% elif (states('sensor.purpleair_pm25')|float(0)) > 35.5 %}
            {{ calcAQI((states('sensor.purpleair_pm25')|float(0)), 150.0, 101.0, 55.4, 35.5) }}
          {% elif (states('sensor.purpleair_pm25')|float(0)) > 12.1 %}
            {{ calcAQI((states('sensor.purpleair_pm25')|float(0)), 100.0, 51.0, 35.4, 12.1) }}
          {% elif (states('sensor.purpleair_pm25')|float(0)) >= 0.0 %}
            {{ calcAQI((states('sensor.purpleair_pm25')|float(0)), 50.0, 0.0, 12.0, 0.0) }}
          {% else %}
            invalid
          {% endif %}
        unit_of_measurement: "bit"
      purpleair_description:
        unique_id: 'purpleair_SENSORID_description'
        friendly_name: 'PurpleAir AQI Description'
        value_template: >
          {% if (states('sensor.purpleair_aqi')|float(0)) >= 401.0 %}
            Hazardous
          {% elif (states('sensor.purpleair_aqi')|float(0)) >= 301.0 %}
            Hazardous
          {% elif (states('sensor.purpleair_aqi')|float(0)) >= 201.0 %}
            Very Unhealthy
          {% elif (states('sensor.purpleair_aqi')|float(0)) >= 151.0 %}
            Unhealthy
          {% elif (states('sensor.purpleair_aqi')|float(0)) >= 101.0 %}
            Unhealthy for Sensitive Groups
          {% elif (states('sensor.purpleair_aqi')|float(0)) >= 51.0 %}
            Moderate
          {% elif (states('sensor.purpleair_aqi')|float(0)) >= 0.0 %}
            Good
          {% else %}
            undefined
          {% endif %}
#        entity_id: sensor.purpleair
      purpleair_pm25:
        unique_id: 'purpleair_SENSORID_pm25'
        friendly_name: 'PurpleAir PM 2.5'
        value_template: "{{ state_attr('sensor.purpleair','results')[0]['PM2_5Value'] }}"
        unit_of_measurement: "μg/m3"
#        entity_id: sensor.purpleair
      purpleair_temp:
        unique_id: 'purpleair_SENSORID_temperature'
        friendly_name: 'PurpleAir Temperature'
        value_template: "{{ state_attr('sensor.purpleair','results')[0]['temp_f'] }}"
        unit_of_measurement: "°F"
#        entity_id: sensor.purpleair
      purpleair_humidity:
        unique_id: 'purpleair_SENSORID_humidity'
        friendly_name: 'PurpleAir Humidity'
        value_template: "{{ state_attr('sensor.purpleair','results')[0]['humidity'] }}"
        unit_of_measurement: "%"
#        entity_id: sensor.purpleair
      purpleair_pressure:
        unique_id: 'purpleair_SENSORID_pressure'
        friendly_name: 'PurpleAir Pressure'
        value_template: "{{ state_attr('sensor.purpleair','results')[0]['pressure'] }}"
        unit_of_measurement: "hPa"
#        entity_id: sensor.purpleair
# Purpleair End of Sensors


  - platform: template
    sensors:
      # Gets temperature from Honeywell climate
      master_bedroom_temperature:
        friendly_name: Master Bedroom Temperature
        unit_of_measurement: '°F'
        value_template: >
          {{ float(state_attr('climate.bedroom', 'current_temperature')) }}
      # Gets temperature from Honeywell climate
      southbedrooms_temperature:
        friendly_name: South Bedrooms Temperature
        unit_of_measurement: '°F'
        value_template: >
          {{ float(state_attr('climate.south_bedrooms', 'current_temperature')) }}

# Mail Summary Sensors
  - platform: template
    sensors:
      mail_deliveries_message:
        friendly_name: "Deliveries Summary"
        value_template: > 
          {# Deliveries Sentence #}
            {% macro deliveries_sentence() -%}
                  {%- if states("sensor.mail_usps_mail")|int == 0 -%}
                    No
                  {%- else -%}
                    {{states("sensor.mail_usps_mail")|int}}
                  {%- endif -%}
                {{' '}} 
                  {%- if states("sensor.mail_usps_mail")|int <= 1 -%}
                    pieces of mail
                  {%- else -%}
                    pieces of mail
                  {%- endif -%}
                {{' '}}will be delivered.{{' '}} 
                  {%- if states("sensor.mail_usps_delivering")|int == 0 -%}
                    No
                  {%- else -%}
                    {{states("sensor.mail_usps_delivering")|int}}
                  {%- endif -%}
                {{' '}} 
                  {%- if states("sensor.mail_usps_delivering")|int == 1 -%}
                    USPS package is
                  {%- else -%}
                    USPS packages are
                  {%- endif -%}
                {{' '}}in transit.{{' '}}
                  {%- if states("sensor.mail_fedex_delivering")|int == 0 -%}
                    No
                  {%- else -%}
                    {{states("sensor.mail_fedex_delivering")|int}}
                  {%- endif -%}
                {{' '}} 
                  {%- if states("sensor.mail_fedex_delivering")|int == 1 -%}
                    FedEx package is
                  {%- else -%}
                    Fedex packages are
                  {%- endif -%}
                {{' '}}in transit.{{' '}}
                {%- if states("sensor.mail_ups_delivering")|int == 0 -%}
                    No
                  {%- else -%}
                    {{states("sensor.mail_ups_delivering")|int}}
                  {%- endif -%}
                {{' '}} 
                  {%- if states("sensor.mail_ups_delivering")|int == 1 -%}
                    UPS package is
                  {%- else -%}
                    UPS packages are
                  {%- endif -%}
                {{' '}}in transit.{{' '}}
                {%- if states("sensor.mail_amazon_packages")|int == 0 -%}
                    No
                  {%- else -%}
                    {{states("sensor.mail_amazon_packages")|int}}
                  {%- endif -%}
                {{' '}} 
                  {%- if states("sensor.mail_amazon_packages")|int == 1 -%}
                    Amazon package is
                  {%- else -%}
                    Amazon packages are
                  {%- endif -%}
                {{' '}}in transit.{{' '}}
            {%- endmacro %}
          {{deliveries_sentence()}}
# Mail Summary End of Sesnsors

# Water Softner Level Sensors
  - platform: template
    sensors:
      water_softener_percentage:
         friendly_name: "Water Softener Percentage"
         unit_of_measurement: '%'
         value_template: "{{ ((states('sensor.water_softener')|float * -4.00) + 100.00)| round (2)}}"

  - platform: template
    sensors:
      water_softener_need_filled:
        friendly_name: "Water Softener - Needs filled?"
        value_template: >-
          {% if states('sensor.water_softener_percentage')| float < 10 %}
            on
          {% else %}
            off
          {% endif %}
# Water Softner Level End of Sensors



#==================
#=== System Sensors
#==================
  - platform: systemmonitor
    resources:
      - type: last_boot
      - type: disk_use_percent
        arg: /
      - type: memory_use_percent
      - type: processor_use
      - type: processor_temperature
      - type: memory_free
      
# WeatherUnderground sensors
  - platform: wundergroundpws
    api_key: !secret wunderground_PWS_API_key
    pws_id: KAZFOUNT19
    latitude: 33.6075
    longitude: -111.7465
    numeric_precision: decimal
    monitored_conditions:
      - humidity
      - temp
      - dewpt
      - heatIndex
      - windChill
      - precipRate
      - precipTotal
      - pressure
      - windGust
      - windSpeed
      - weather_1d
      - weather_1n
      - weather_2d
      - weather_2n
      - weather_3d
      - weather_3n
      - weather_4d
      - weather_4n
      - weather_5d
      - weather_5n
      - temp_high_1d
      - temp_low_1d
      - wind_1d
      - precip_1d
      - precip_chance_1d
      - winddir
      - obsTimeLocal
      - stationID
      - elev
      - today_summary

panel_iframe:
  # Zigbee2mqtt menu
  zigbee2mqtt:
    title: "Zigbee2mqtt"
    url: "https://zigbee2mqtt.trebacz.com/"
    icon: mdi:lan
    require_admin: true

cover:
  - platform: mqtt
    name: "Garage Door"
    state_topic: "homeassistant/garage/state"
    command_topic: "shellies/shelly1-E8DB84D6C1D8/relay/0/command"
    availability_topic: "shellies/shelly1-E8DB84D6C1D8/online"
    retain: false
    payload_open: "on"
    payload_close: "on"
    payload_stop: "on"
    state_open: "open"
    state_closed: "closed"
    payload_available: "true"
    payload_not_available: "false"
    device_class: "garage"
    unique_id: "shelly1-E8DB84D6C1D8"
    #optimistic: true

http:
  use_x_forwarded_for: true
  trusted_proxies:
    - !secret trusted_proxy_NGINX
  ip_ban_enabled: true
  login_attempts_threshold: 10
